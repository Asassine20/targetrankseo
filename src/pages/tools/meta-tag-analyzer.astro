---
import CallToAction from '~/components/widgets/CallToAction.astro';
import Features2 from '~/components/widgets/Features2.astro';
import Hero from '~/components/widgets/Hero.astro';
import Layout from '~/layouts/PageLayout.astro';

const metadata = {
  title: 'Free Meta Tag Analyzer | SEO Tag Checker Tool',
  description: 'Instantly analyze any webpage\'s meta tags, headings, and content structure. Perfect for competitive SEO research.',
};
---

<Layout metadata={metadata}>
  <!-- Hero Widget -->
  <Hero
    tagline="Free SEO Tool"
    title="Meta Tag & Content Analyzer"
    subtitle="Instantly analyze any webpage's meta tags, headings, and content structure. Perfect for competitive research and on-page SEO audits."
  />

  <!-- Tool Widget -->
  <div class="px-4 py-16 mx-auto sm:max-w-xl md:max-w-full lg:max-w-screen-xl md:px-24 lg:px-8 lg:py-20">
    <div class="mx-auto sm:text-center">
      <form id="meta-analyzer-form" class="mb-8">
        <div class="flex flex-col md:flex-row gap-4 justify-center">
          <input
            type="url"
            id="page-url"
            placeholder="https://example.com"
            class="flex-grow px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600"
            required
          />
          <button
            type="submit"
            class="px-6 py-2 font-medium bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
          >
            Analyze Page
          </button>
        </div>
        <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">We'll fetch a live version of the page</p>
      </form>

      <div id="error-message" class="text-red-500 dark:text-red-400 mb-4 text-center"></div>

      <div id="meta-results" class="text-left">
        <!-- Initial placeholder -->
        <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-8 text-center">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">How to use this tool:</h3>
          <ol class="list-decimal list-inside text-gray-700 dark:text-gray-300 space-y-1 text-left max-w-md mx-auto">
            <li>Enter any webpage URL</li>
            <li>See all meta tags and heading structure</li>
            <li>Get automatic SEO recommendations</li>
          </ol>
          <p class="mt-4 text-gray-500 dark:text-gray-400">Example URLs to try: your competitor's homepage, your latest blog post, or any webpage you want to analyze.</p>
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('meta-analyzer-form');
      const results = document.getElementById('meta-results');
      const errorBox = document.getElementById('error-message');
      
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        errorBox.textContent = '';
        
        const url = document.getElementById('page-url').value.trim();
        if (!url) return;
        
        // Add https:// if missing
        const fullUrl = url.startsWith('http') ? url : `https://${url}`;
        
        try {
          results.innerHTML = `
            <div class="text-center py-4">
              <svg class="animate-spin h-5 w-5 text-blue-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <p class="mt-2">Analyzing page structure...</p>
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Note: We never store the pages you analyze</p>
            </div>
          `;
          
          // Use CORS proxy to bypass restrictions (client-side only)
          const proxyUrl = 'https://api.allorigins.win/get?url=' + encodeURIComponent(fullUrl);
          const response = await fetch(proxyUrl);
          const data = await response.json();
          
          if (data.contents) {
            const parser = new DOMParser();
            const htmlDoc = parser.parseFromString(data.contents, 'text/html');
            analyzePage(htmlDoc, fullUrl);
          } else {
            throw new Error('Could not fetch page');
          }
        } catch (err) {
          errorBox.textContent = 'Error: ' + err.message;
          results.innerHTML = `
            <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-8 text-center">
              <p class="text-gray-500 dark:text-gray-400">Enter a URL to analyze its meta tags and headings</p>
            </div>
          `;
        }
      });
      
      function analyzePage(doc, originalUrl) {
        // Extract meta tags
        const metaTags = Array.from(doc.querySelectorAll('meta')).map(meta => {
          return {
            name: meta.getAttribute('name') || meta.getAttribute('property') || meta.getAttribute('itemprop'),
            content: meta.getAttribute('content')
          };
        }).filter(tag => tag.name && tag.content);
        
        // Extract headings
        const headings = Array.from(doc.querySelectorAll('h1, h2, h3, h4, h5, h6')).map(heading => {
          return {
            level: heading.tagName,
            text: heading.textContent.trim(),
            length: heading.textContent.trim().length
          };
        });
        
        // Calculate word count
        const bodyText = doc.body?.textContent || '';
        const wordCount = bodyText.trim().split(/\s+/).filter(Boolean).length;
        
        // Build results HTML
        let html = `
          <div class="space-y-6">
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
              <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Analysis of <a href="${originalUrl}" target="_blank" rel="noopener" class="text-blue-600 hover:underline dark:text-blue-400">${originalUrl}</a></h3>
              
              <div class="mb-6">
  <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">üîç Meta Tags Found (${metaTags.length})</h4>
  <div class="grid gap-3">
    ${metaTags.map(tag => `
      <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg border-l-4 border-blue-500 overflow-hidden">
        <p class="font-medium text-blue-600 dark:text-blue-400 break-words">${tag.name}:</p>
        <div class="mt-1 p-2 bg-white/50 dark:bg-gray-600/20 rounded">
          <p class="text-gray-700 dark:text-gray-300 whitespace-pre-wrap break-words font-mono text-sm">${tag.content}</p>
        </div>
        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">${tag.content.length} characters</p>
      </div>
    `).join('')}
  </div>
</div>
              
              <div class="mb-6">
  <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">üìù Heading Structure (${headings.length})</h4>
  <div class="space-y-1">
    ${headings.map(heading => {
      const indentLevel = parseInt(heading.level.substring(1)) - 1;
      const indentClass = `ml-${indentLevel * 4}`;
      const borderColors = {
        'H1': 'border-blue-500',
        'H2': 'border-blue-400',
        'H3': 'border-blue-300',
        'H4': 'border-blue-200',
        'H5': 'border-blue-100',
        'H6': 'border-blue-50'
      };
      return `
        <div class="${indentClass} bg-gray-50 dark:bg-gray-700 p-2 rounded-lg border-l-4 ${borderColors[heading.level] || 'border-blue-300'}">
          <div class="flex items-center gap-2">
            <span class="font-mono text-xs font-bold px-1.5 py-0.5 rounded bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100">
              ${heading.level}
            </span>
            <span class="text-gray-700 dark:text-gray-300">
              ${heading.text.length > 60 ? heading.text.substring(0, 60) + '...' : heading.text}
            </span>
            <span class="ml-auto text-xs text-gray-500 dark:text-gray-400">
              ${heading.length} chars
            </span>
          </div>
        </div>
      `;
    }).join('')}
  </div>
</div>
              
              <div>
                <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">üìä Content Metrics</h4>
                <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg text-center">
                    <p class="text-2xl font-bold text-blue-600 dark:text-blue-400">${wordCount.toLocaleString()}</p>
                    <p class="text-gray-700 dark:text-gray-300">Total Words</p>
                  </div>
                  <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg text-center">
                    <p class="text-2xl font-bold text-blue-600 dark:text-blue-400">${doc.querySelectorAll('img').length}</p>
                    <p class="text-gray-700 dark:text-gray-300">Images</p>
                  </div>
                  <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg text-center">
                    <p class="text-2xl font-bold text-blue-600 dark:text-blue-400">${doc.querySelectorAll('a').length}</p>
                    <p class="text-gray-700 dark:text-gray-300">Links</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="bg-green-50 dark:bg-green-900/20 p-6 rounded-lg border-l-4 border-green-500">
              <h4 class="text-lg font-semibold text-green-800 dark:text-green-200 mb-3">üí° SEO Recommendations</h4>
              <ul class="space-y-2">
                ${getSEOTips(metaTags, headings, wordCount)}
              </ul>
            </div>
          </div>
        `;
        
        results.innerHTML = html;
      }
      
      function getSEOTips(metaTags, headings, wordCount) {
        const tips = [];
        const hasTitle = metaTags.some(tag => tag.name === 'title');
        const hasDescription = metaTags.some(tag => tag.name === 'description');
        const h1Count = headings.filter(h => h.level === 'H1').length;
        
        if (!hasTitle) tips.push('Missing &lt;title&gt; tag - crucial for SEO');
        if (!hasDescription) tips.push('Missing meta description - important for click-through rates');
        if (h1Count === 0) tips.push('No H1 heading found - your page should have one main heading');
        if (h1Count > 1) tips.push(`Multiple H1 headings (${h1Count}) - consider using only one`);
        if (wordCount < 300) tips.push('Content seems short (' + wordCount + ' words) - consider expanding for better SEO');
        
        if (tips.length === 0) {
          tips.push('Good foundation found! Consider analyzing competitors for additional opportunities');
        }
        
        return tips.map(tip => '<li class="text-green-700 dark:text-green-300">' + tip + '</li>').join('');
      }
    });
  </script>

  <!-- Features -->
  <Features2
    title="Why Analyze Meta Tags?"
    items={[
      {
        title: "Competitive Research",
        description: "See what meta tags competitors use for their highest-ranking pages.",
      },
      {
        title: "SEO Audits",
        description: "Quickly check if pages have proper title tags, descriptions, and heading structure.",
      },
      {
        title: "Content Gaps",
        description: "Identify content structure differences between your pages and competitors'.",
      },
      {
        title: "No Backend Needed",
        description: "100% client-side tool that works directly in your browser.",
      }
    ]}
  />

  <!-- CTA -->
  <CallToAction
    title="Need Help With Your SEO Strategy?"
    subtitle="Our team can analyze your entire site and create a customized optimization plan."
    primaryButtonText="Get Free SEO Audit"
    primaryButtonLink="/seo-audit"
    secondaryButtonText="See All Tools"
    secondaryButtonLink="/tools"
  />
</Layout>